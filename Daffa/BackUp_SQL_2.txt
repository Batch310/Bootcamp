drop TABLE film;

CREATE TABLE public.film (
    kd_film character varying(5) primary key,
    nm_film character varying(50),
    genre character varying(5),
    artis character varying(5),
    produser character varying(5),
    pendapatan integer,
    nominasi integer
);
CREATE TABLE public.produser (
    kd_produser character varying(5) primary key,
    nm_produser character varying(50),
    international character varying(10)
);
CREATE TABLE public.negara (
    kd_negara character varying(5) primary key,
    nm_negara character varying(50)
);
CREATE TABLE public.genre (
    kd_genre character varying(5) primary key,
    nm_genre character varying(50)
);
CREATE TABLE public.artis (
    kd_artis character varying(5) primary key,
    nm_artis character varying(50),
    jk character varying(10),
    bayaran integer,
    award integer,
    negara character varying(5)
    );

INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F001', 'IRON MAN', 'G001', 'A001', 'PD01', 2000000000, 3);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F002', 'IRON MAN 2', 'G001', 'A001', 'PD01', 1800000000, 2);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F003', 'IRON MAN 3', 'G001', 'A001', 'PD01', 1200000000, 0);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F004', 'AVENGER:CIVIL WAR', 'G001', 'A001', 'PD01', 2000000000, 1);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F005', 'SPIDERMAN HOMCOMING', 'G001', 'A001', 'PD01', 1300000000, 0);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F006', 'THE RAID', 'G001', 'A004', 'PD03', 800000000, 5);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F007', 'FAST N FURIOUS', 'G001', 'A004', 'PD05', 830000000, 2);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F008', 'HABIBI N AINUN', 'G004', 'A005', 'PD03', 670000000, 4);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F009', 'POLICE STORY', 'G001', 'A003', 'PD02', 700000000, 3);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F010', 'POLICE STORY 2', 'G001', 'A003', 'PD02', 710000000, 1);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F011', 'POLICE STORY 3', 'G001', 'A003', 'PD02', 615000000, 0);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F012', 'RUSH HOUR', 'G003', 'A003', 'PD05', 695000000, 2);
INSERT INTO public.film (kd_film, nm_film, genre, artis, produser, pendapatan, nominasi) VALUES ('F013', 'KUNGFU PANDA', 'G003', 'A003', 'PD05', 923000000, 5);


INSERT INTO public.produser (kd_produser, nm_produser, international) VALUES ('PD01', 'MARVEL', 'YA');
INSERT INTO public.produser (kd_produser, nm_produser, international) VALUES ('PD02', 'HONGKONG CINEMA', 'YA');
INSERT INTO public.produser (kd_produser, nm_produser, international) VALUES ('PD03', 'RAPI FILM', 'TIDAK');
INSERT INTO public.produser (kd_produser, nm_produser, international) VALUES ('PD04', 'PARKIT FILM', 'TIDAK');
INSERT INTO public.produser (kd_produser, nm_produser, international) VALUES ('PD05', 'PARAMOUNT PICTURE', 'YA');

INSERT INTO public.negara (kd_negara, nm_negara) VALUES ('AS', 'AMERIKA SERIKAT');
INSERT INTO public.negara (kd_negara, nm_negara) VALUES ('HK', 'HONGKONG');
INSERT INTO public.negara (kd_negara, nm_negara) VALUES ('ID', 'INDONESIA');
INSERT INTO public.negara (kd_negara, nm_negara) VALUES ('IN', 'INDIA');

INSERT INTO public.genre (kd_genre, nm_genre) VALUES ('G001', 'ACTION');
INSERT INTO public.genre (kd_genre, nm_genre) VALUES ('G002', 'HORROR');
INSERT INTO public.genre (kd_genre, nm_genre) VALUES ('G003', 'COMEDY');
INSERT INTO public.genre (kd_genre, nm_genre) VALUES ('G004', 'DRAMA');
INSERT INTO public.genre (kd_genre, nm_genre) VALUES ('G005', 'THRILER');
INSERT INTO public.genre (kd_genre, nm_genre) VALUES ('G006', 'FICTION');

INSERT INTO public.artis (kd_artis, nm_artis, jk, bayaran, award, negara) VALUES ('A001', 'ROBERT DOWNEY JR', 'PRIA', 1000000000, 2, 'AS');
INSERT INTO public.artis (kd_artis, nm_artis, jk, bayaran, award, negara) VALUES ('A003', 'JACKIE CHAN', 'PRIA', 1200000000, 7, 'HK');
INSERT INTO public.artis (kd_artis, nm_artis, jk, bayaran, award, negara) VALUES ('A004', 'JOE TASLIM', 'PRIA', 350000000, 1, 'ID');
INSERT INTO public.artis (kd_artis, nm_artis, jk, bayaran, award, negara) VALUES ('A005', 'CHELSEA ISLAN', 'WANITA', 300000000, 0, 'ID');
INSERT INTO public.artis (kd_artis, nm_artis, jk, bayaran, award, negara) VALUES ('A002', 'ANGELINA JOLIE', 'WANITA', 700000000, 1, 'AS');

--Latihan Soal Film 2
select * from film;
select * from produser;
select * from negara;
select * from genre;
select * from artis;

--14 tampilkan nama film dan artisnya
select
	f.nm_film,
	a.nm_artis
from film f
inner join artis a
	on f.artis = a.kd_artis;

--15 tampilkan film yg artisnya berasal dari negara HONGKONG
select
	f.nm_film,
	a.nm_artis,
	n.nm_negara
from film f
inner join artis a
	on f.artis = a.kd_artis
inner join negara n
	on a.negara = n.kd_negara
where n.nm_negara = 'HONGKONG';

--16 tampilkan nama film, nama artis & nama negara yg artisnya 
--   berasal dr negara yg tidak mengandung huruf 'o'

select 
	f.nm_film,
	a.nm_artis,
	n.nm_negara
from film f
inner join artis a
	on f.artis = a.kd_artis 
inner join negara n
	on a.negara = n.kd_negara
where nm_negara not ilike '%o%'
	
--17 tampilkan nama film, artis, & awardnya yg memiliki award terbanyak
select *  from film;
select * from artis;
select
	f.nm_film,
	a.nm_artis,
	a.award
from film f
inner join artis a
	on f.artis = a.kd_artis
where award = (select max(award) from artis);

--18 tampilkan nama film, nama artis & bayaran dengan artis bayaran terendah
select 
	f.nm_film,
	a.nm_artis,
	a.bayaran
from film f
inner join artis a
	on f.artis = a.kd_artis
where a.bayaran = (select min(bayaran) from artis);
--19 tampilkan nama artis yg tidak pernah bermain film
select 
	a.nm_artis 
	--f.nm_film
from film f
right join artis a
	on f.artis = a.kd_artis
where f.nm_film is null;

--20 tampilkan nama artis, film & genre yg bermain film dengan genre drama
select
	a.nm_artis,
	f.nm_film,
	g.nm_genre
from artis a
inner join film f
on a.kd_artis=f.artis
inner join genre g
on f.genre=g.kd_genre
--where lower(g.nm_genre) = lower('dRaMa');
where g.nm_genre ilike 'drama';


--21 tampilkan nama artis, film & genre yg bermain film dengan genre horror\
select nm_artis, nm_film, nm_genre
from film f
join artis a on f.artis = a.kd_artis
join genre g on f.genre = g.kd_genre
where g.nm_genre ilike 'horror';

--22 tampilkan nama film & artis yg dibintangi oleh artis yg huruf depannya 'J'
select
	f.nm_film,
	a.nm_artis
from film f
join artis a
	on f.artis = a.kd_artis
where a.nm_artis ilike 'j%';

--23 tampilkan nama artis yg paling banyak bermain film

--Step 1 tampilin semua nama artis dan berapa jumlah filmnya
select 
	nm_artis,
	count(nm_film) as "jml film"
from film f
inner join artis a
	on f.artis = a.kd_artis
group by nm_artis; 

--Step 2 tampilin jumlah maksimal film yang dimainkan
select 
	max(t1."jml film")
from (
		select --copy dari step 1
			nm_artis,
			count(nm_film) as "jml film"
		from film f
		inner join artis a
			on f.artis = a.kd_artis
		group by nm_artis
	  ) t1

--Step 3 menampilkan nama artis yang paling banyak bermain film
select
	*
from (
	select -- copy dari step 1
		nm_artis,
		count(nm_film) as "jml film"
	from film f
	inner join artis a
		on f.artis = a.kd_artis
	group by nm_artis
	) t1
where t1."jml film" = (select  -- copy dari step 2
						max(t2."jml film")
					from (
						select 
							nm_artis,
							count(nm_film) as "jml film"
						from film f
						inner join artis a
							on f.artis = a.kd_artis
						group by nm_artis
	 					 ) t2)


--Cara 2, pakai temporary table

	--buat table temporary
DROP TABLE IF EXISTS TEMP_TABLE;


CREATE
TEMPORARY TABLE TEMP_TABLE(NM_ARTIS text, JML_FILM int);

	--query langsung insert ke table
INSERT INTO TEMP_TABLE
SELECT NM_ARTIS,
	COUNT(NM_FILM) AS "jml film"
FROM FILM F
INNER JOIN ARTIS A ON F.ARTIS = A.KD_ARTIS
GROUP BY NM_ARTIS;
	
	--cek isi table
SELECT *
FROM TEMP_TABLE;
	
	--tampilkan artis dengan film paling banyak
SELECT *
FROM TEMP_TABLE
WHERE JML_FILM =
		(SELECT MAX(JML_FILM)
			FROM TEMP_TABLE);

--24 tampilkan negara mana yg paling banyak filmnya
DROP TABLE IF EXISTS TEMP_TABLE;


CREATE
TEMPORARY TABLE TEMP_TABLE(NM_NEGARA text, JML_FILM int);


INSERT INTO TEMP_TABLE
SELECT NM_NEGARA,
	COUNT(NM_FILM) AS "jml film"
FROM FILM F
INNER JOIN ARTIS A ON F.ARTIS = A.KD_ARTIS
RIGHT JOIN NEGARA N ON A.NEGARA = N.KD_NEGARA
GROUP BY NM_NEGARA;


SELECT *
FROM TEMP_TABLE
WHERE JML_FILM =
		(SELECT MAX(JML_FILM)
			FROM TEMP_TABLE);
--25 tampilkan data negara dengan jumlah filmnya
SELECT NM_NEGARA,
	COUNT(NM_FILM) AS "jml film"
FROM FILM F
INNER JOIN ARTIS A ON F.ARTIS = A.KD_ARTIS
RIGHT JOIN NEGARA N ON A.NEGARA = N.KD_NEGARA
GROUP BY NM_NEGARA;
--26 tampilkan nama produser yg skalanya international
SELECT NM_PRODUSER, INTERNATIONAL FROM PRODUSER
WHERE INTERNATIONAL ILIKE 'YA';
--27 tampilkan jumlah film dr masing2 produser
SELECT NM_PRODUSER,
	COUNT(NM_FILM) AS "jml film"
FROM FILM F
RIGHT JOIN PRODUSER P ON F.PRODUSER = P.KD_PRODUSER
GROUP BY NM_PRODUSER;
--28 tampilkan jumlah nominasi dari masing2 produser
SELECT NM_PRODUSER,
	SUM(NOMINASI) AS "nominasi total"
FROM FILM F
RIGHT JOIN PRODUSER P ON F.PRODUSER = P.KD_PRODUSER
GROUP BY NM_PRODUSER;

--29 tampilkan jumlah pendapatan produser marvel secara keseluruhan

DROP TABLE IF EXISTS TEMP_TABLE;


CREATE
TEMPORARY TABLE TEMP_TABLE(NM_PRODUSER text, JML_PENDAPATAN bigint);


INSERT INTO TEMP_TABLE
SELECT NM_PRODUSER,
	SUM(PENDAPATAN) as jml_pendapatan
FROM FILM F
RIGHT JOIN PRODUSER P ON F.PRODUSER = P.KD_PRODUSER
GROUP BY NM_PRODUSER;


SELECT *
FROM TEMP_TABLE
WHERE NM_PRODUSER ilike 'marvel';
--30 tampilkan jumlah pendapatan produser yg skalanya tidak international
DROP TABLE IF EXISTS TEMP_TABLE;


CREATE
TEMPORARY TABLE TEMP_TABLE(NM_PRODUSER text, INTERNATIONAL TEXT, JML_PENDAPATAN bigint);


INSERT INTO TEMP_TABLE
SELECT NM_PRODUSER,
	P.INTERNATIONAL,
	SUM(PENDAPATAN) as jml_pendapatan
FROM FILM F
RIGHT JOIN PRODUSER P ON F.PRODUSER = P.KD_PRODUSER
GROUP BY NM_PRODUSER, INTERNATIONAL;


SELECT *
FROM TEMP_TABLE
WHERE INTERNATIONAL ilike 'TIDAK';
--31 tampilkan produser yg tidak punya film
DROP TABLE IF EXISTS TEMP_TABLE;


CREATE
TEMPORARY TABLE TEMP_TABLE(NM_PRODUSER text, JML_FILM INT);

INSERT INTO TEMP_TABLE
SELECT NM_PRODUSER,
	COUNT(NM_FILM) AS "jml film"
FROM FILM F
RIGHT JOIN PRODUSER P ON F.PRODUSER = P.KD_PRODUSER
GROUP BY NM_PRODUSER;

SELECT *
FROM TEMP_TABLE
WHERE JML_FILM = (SELECT MIN(JML_FILM) FROM TEMP_TABLE);
--32 tampilkan produser film yg memilik artis termahal
SELECT DISTINCT NM_PRODUSER,
	NM_ARTIS,
	BAYARAN
FROM PRODUSER P
INNER JOIN FILM F ON P.KD_PRODUSER = F.PRODUSER
INNER JOIN ARTIS A ON F.ARTIS = A.KD_ARTIS
WHERE A.BAYARAN = (SELECT MAX(BAYARAN) FROM ARTIS);
--33 tampilkan produser yg memiliki artis paling banyak	
DROP TABLE IF EXISTS TEMP_TABLE;


CREATE
TEMPORARY TABLE TEMP_TABLE(NM_PRODUSER text, JML_ARTIS INT);


INSERT INTO TEMP_TABLE
SELECT P.NM_PRODUSER,
	COUNT(DISTINCT ARTIS) AS "JUMLAH_ARTIS"
FROM FILM F
INNER JOIN PRODUSER P ON F.PRODUSER = P.KD_PRODUSER
INNER JOIN ARTIS A ON F.ARTIS = A.KD_ARTIS
GROUP BY P.NM_PRODUSER;
SELECT *
FROM TEMP_TABLE
WHERE JML_ARTIS = (SELECT MAX(JML_ARTIS) FROM TEMP_TABLE);
--34 tampilkan produser yg memiliki artis paling sedikit
DROP TABLE IF EXISTS TEMP_TABLE;


CREATE
TEMPORARY TABLE TEMP_TABLE(NM_PRODUSER text, JML_ARTIS INT);


INSERT INTO TEMP_TABLE
SELECT P.NM_PRODUSER,
	COUNT(DISTINCT ARTIS) AS "JUMLAH_ARTIS"
FROM FILM F
INNER JOIN PRODUSER P ON F.PRODUSER = P.KD_PRODUSER
INNER JOIN ARTIS A ON F.ARTIS = A.KD_ARTIS
GROUP BY P.NM_PRODUSER;
SELECT *
FROM TEMP_TABLE
WHERE JML_ARTIS = (SELECT MIN(JML_ARTIS) FROM TEMP_TABLE);

DROP TABLE IF EXISTS BIODATA;


CREATE TABLE BIODATA (ID bigint, FIRST_NAME VARCHAR(20),
																							LAST_NAME VARCHAR(30),
																							DOB VARCHAR(10),
																							POB VARCHAR(50),
																							ADDRESS VARCHAR(255),
																							MARITAL_STATUS boolean);

INSERT INTO biodata VALUES (1, 'Raya', 'Indriyani', '1991-01-01', 'Bali', 'Jl. Raya Baru, Bali', false);
INSERT INTO biodata VALUES (2, 'Rere', 'Wulandari', '1992-01-02', 'Bandung', 'Jl. Berkah Ramadhan, Bandung', false);
INSERT INTO biodata VALUES (3, 'Bunga', 'Maria', '1991-03-03', 'Jakarta', 'Jl. Mawar Semerbak, Bogor', true);
INSERT INTO biodata VALUES (4, 'Natasha', 'Wulan', '1990-04-10', 'Jakarta', 'Jl. Mawar Harum, Jakarta', false);
INSERT INTO biodata VALUES (5, 'Zahra', 'Aurelia Putri', '1991-03-03', 'Jakarta', 'Jl. Mawar Semerbak, Bogor', true);
INSERT INTO biodata VALUES (6, 'Katniss', 'Everdeen', '1989-01-12', 'Jakarta', 'Jl. Bunga Melati, Jakarta', true);

DROP TABLE IF EXISTS EMPLOYEE;


CREATE TABLE EMPLOYEE (ID bigint, BIODATA_ID bigint, NIP VARCHAR(5),
																								STATUS VARCHAR(10),
																								SALARY DECIMAL(10,

																																0));

INSERT INTO employee VALUES (1, 1, 'NX001', 'Permanen', 12000000);
INSERT INTO employee VALUES (2, 2, 'NX002', 'Kontrak', 15000000);
INSERT INTO employee VALUES (3, 4, 'NX003', 'Permanen', 13500000);
INSERT INTO employee VALUES (4, 5, 'NX004', 'Permanen', 12000000);
INSERT INTO employee VALUES (5, 6, 'NX005', 'Permanen', 17000000);

DROP TABLE IF EXISTS CONTACT_PERSON;


CREATE TABLE CONTACT_PERSON (ID bigint, BIODATA_ID bigint, TYPE VARCHAR(5),
																														CONTACT VARCHAR(100));

INSERT INTO contact_person VALUES (1, 1, 'MAIL', 'raya.indriyani@gmail.com');
INSERT INTO contact_person VALUES (2, 1, 'PHONE', '085612345678');
INSERT INTO contact_person VALUES (3, 2, 'MAIL', 'rere.wulandari@gmail.com');
INSERT INTO contact_person VALUES (4, 2, 'PHONE', '081312345678');
INSERT INTO contact_person VALUES (5, 2, 'PHONE', '087812345678');
INSERT INTO contact_person VALUES (6, 3, 'MAIL', 'bunga.maria@gmail.com');
INSERT INTO contact_person VALUES (7, 4, 'MAIL', 'natasha.wulan@gmail.com');
INSERT INTO contact_person VALUES (8, 5, 'MAIL', 'zahra.putri@gmail.com');
INSERT INTO contact_person VALUES (9, 6, 'MAIL', 'katniss.everdeen@gmail.com');

DROP TABLE IF EXISTS LEAVE;


CREATE TABLE LEAVE (ID bigint, TYPE VARCHAR(10),
																					NAME VARCHAR(100));

INSERT INTO leave VALUES (1, 'Regular', 'Cuti Tahunan');
INSERT INTO leave VALUES (2, 'Khusus', 'Cuti Menikah');
INSERT INTO leave VALUES (3, 'Khusus', 'Cuti Haji & Umroh');
INSERT INTO leave VALUES (4, 'Khusus', 'Melahirkan');

DROP TABLE IF EXISTS EMPLOYEE_LEAVE;


CREATE TABLE EMPLOYEE_LEAVE (ID integer, EMPLOYEE_ID integer, PERIOD VARCHAR(4),
																														REGULAR_QUOTA integer);

INSERT INTO employee_leave VALUES (1, 1, '2020', 16);
INSERT INTO employee_leave VALUES (2, 2, '2020', 12);
INSERT INTO employee_leave VALUES (3, 1, '2021', 16);
INSERT INTO employee_leave VALUES (4, 2, '2021', 12);
INSERT INTO employee_leave VALUES (5, 4, '2021', 12);
INSERT INTO employee_leave VALUES (6, 5, '2021', 12);
INSERT INTO employee_leave VALUES (7, 6, '2021', 12);

DROP TABLE IF EXISTS LEAVE_REQUEST;


CREATE TABLE LEAVE_REQUEST (ID bigint, EMPLOYEE_ID bigint, LEAVE_ID bigint, START_DATE date, END_DATE date, REASON VARCHAR(255));

INSERT INTO leave_request VALUES (1, 1, 1, '2020-10-10', '2020-10-12', 'Liburan');
INSERT INTO leave_request VALUES (2, 1, 1, '2020-11-12', '2020-11-15', 'Acara keluarga');
INSERT INTO leave_request VALUES (3, 2, 2, '2020-05-05', '2020-05-07', 'Menikah');
INSERT INTO leave_request VALUES (4, 2, 1, '2020-09-09', '2020-09-13', 'Touring');
INSERT INTO leave_request VALUES (5, 2, 1, '2020-12-24', '2020-12-25', 'Acara keluarga');

DROP TABLE IF EXISTS TRAVEL_TYPE;


CREATE TABLE TRAVEL_TYPE (ID bigint, NAME VARCHAR(50),
																											TRAVEL_FEE integer);

INSERT INTO travel_type VALUES (1, 'In Indonesia', 200000);
INSERT INTO travel_type VALUES (2, 'Out Indonesia', 350000);

DROP TABLE IF EXISTS TRAVEL_REQUEST;


CREATE TABLE TRAVEL_REQUEST (ID bigint, EMPLOYEE_ID bigint, TRAVEL_TYPE_ID bigint, START_DATE date, END_DATE date);

INSERT INTO travel_request VALUES (1, 1, 1, '2020-07-07', '2020-07-08');
INSERT INTO travel_request VALUES (2, 1, 1, '2020-08-07', '2020-08-08');
INSERT INTO travel_request VALUES (3, 2, 2, '2020-04-04', '2020-04-07');

DROP TABLE IF EXISTS TRAVEL_SETTLEMENT;


CREATE TABLE TRAVEL_SETTLEMENT (ID bigint, TRAVEL_REQUEST_ID bigint, ITEM_NAME VARCHAR(100),
																																	ITEM_COST integer);

INSERT INTO travel_settlement VALUES (1, 1, 'Tiket travel Do-Car berangkat', 165000);
INSERT INTO travel_settlement VALUES (2, 1, 'Hotel', 750000);
INSERT INTO travel_settlement VALUES (3, 1, 'Tiket travel Do-Car pulang', 165000);
INSERT INTO travel_settlement VALUES (4, 2, 'Tiket pesawat berangkat', 750000);
INSERT INTO travel_settlement VALUES (5, 2, 'Hotel', 650000);
INSERT INTO travel_settlement VALUES (6, 2, 'Tiket pesawat pulang', 1250000);
INSERT INTO travel_settlement VALUES (7, 3, 'Tiket pesawat berangkat', 4750000);
INSERT INTO travel_settlement VALUES (8, 3, 'Hotel', 6000000);
INSERT INTO travel_settlement VALUES (9, 2, 'Tiket pesawat pulang', 4250000);

DROP TABLE IF EXISTS POSITION;


CREATE TABLE POSITION (ID bigint, NAME VARCHAR(100));

INSERT INTO position VALUES (1, 'Direktur');
INSERT INTO position VALUES (2, 'General Manager');
INSERT INTO position VALUES (3, 'Manager');
INSERT INTO position VALUES (4, 'Staff');

DROP TABLE IF EXISTS EMPLOYEE_POSITION;


CREATE TABLE EMPLOYEE_POSITION (ID bigint, EMPLOYEE_ID bigint, POSITION_ID bigint);

INSERT INTO employee_position VALUES (1, 5, 1);
INSERT INTO employee_position VALUES (2, 4, 2);
INSERT INTO employee_position VALUES (3, 3, 3);
INSERT INTO employee_position VALUES (4, 2, 4);
INSERT INTO employee_position VALUES (5, 1, 4);

DROP TABLE IF EXISTS DEPARTMENT;


CREATE TABLE DEPARTMENT (ID bigint, NAME VARCHAR(100));

INSERT INTO department VALUES (1, 'Recruitment');
INSERT INTO department VALUES (2, 'Sales');
INSERT INTO department VALUES (3, 'Human Resource');
INSERT INTO department VALUES (4, 'General Affair');

DROP TABLE IF EXISTS FAMILY;


CREATE TABLE FAMILY (ID bigint, BIODATA_ID bigint, NAME VARCHAR(100),
																						STATUS VARCHAR(50));

INSERT INTO family VALUES (1, 3, 'Azka Fadlan Zikrullah', 'Suami');
INSERT INTO family VALUES (2, 3, 'Primrose Everdeen', 'Anak');
INSERT INTO family VALUES (3, 5, 'Jaka Samudera Buana', 'Suami');
INSERT INTO family VALUES (4, 5, 'Friska Davira', 'Anak');
INSERT INTO family VALUES (5, 5, 'Harum Indah Az Zahra', 'Anak');
INSERT INTO family VALUES (6, 6, 'Adya Pratama Yuda', 'Suami');

---------------------------------------------------------------------
--CONCAT : MENGGABUNGKAN DUA ATAU LEBIH TEXT

SELECT *
FROM BIODATA;


SELECT FIRST_NAME,
	LAST_NAME,
	CONCAT(FIRST_NAME,

		' ',
		LAST_NAME) AS "FULL NAME 1",
	FIRST_NAME || ' ' || LAST_NAME AS "FULL NAME 2"
FROM BIODATA;

--FUNGSI NOW() : MENAMPILKAN WAKTU/DATE SEKARANG

SELECT NOW();

--DATE_PART() : MENGAMBIL/ESKTRAK BAGIAN DARI WAKTU

SELECT DATE_PART('YEAR',

								NOW());


SELECT DATE_PART('MONTH',

								NOW());
								
--TO_DATE() : CONVERT STRING KE DATE

SELECT TO_DATE('02/01/2023',

								'DD/MM/YYYY');


SELECT DATE_PART('YEAR',

								TO_DATE('02/01/2023',

									'DD/MM/YYYY'));

SELECT *
FROM BIODATA;


SELECT DOB,
	DATE_PART('YEAR',

		TO_DATE(DOB,

			'YYYY-MM-DD'))
FROM BIODATA;

--AGE() : MENGHITUNG SELISIH DARI DUA DATE

SELECT NOW;


SELECT TO_DATE('15/04/2000',

								'DD/MM/YYYY');


SELECT AGE(NOW(),

								TO_DATE('15/04/2000',

									'DD/MM/YYYY'));


SELECT DATE_PART('YEAR',

								AGE(NOW(),

									TO_DATE('15/04/2000',

										'DD/MM/YYYY')));
										
SELECT DOB,
	TO_DATE(DOB,

		'YYYY-MM-DD'),
	AGE(NOW(),

		TO_DATE(DOB,

			'YYYY-MM-DD')),
	DATE_PART('YEAR',

		AGE(NOW(),

			TO_DATE(DOB,

				'YYYY-MM-DD')))
FROM BIODATA;

--CASE WHEN END : KONDISI PERCABANGAN DI SQL
SELECT *
FROM BIODATA;


SELECT POB,
	CASE
					WHEN POB = 'Bali' THEN 'BALI SKUY'
					WHEN POB = 'Bandung' THEN 'PARIS VAN JAVA BANDUNG'
					ELSE 'kota antah berantah'
	END
FROM BIODATA;

--LATIHAN 1
--1 TAMPILKAN FULLNAME, JABATAN, USIA, & JUMLAH ANAK DARI MASING-MASING KARYAWAN
SELECT CONCAT(FIRST_NAME,' ',LAST_NAME) AS FULLNAME, 
	POS.NAME AS JABATAN, 
	DATE_PART('YEAR',AGE(NOW(),TO_DATE(DOB,'YYYY-MM-DD'))) AS USIA,
	SUM(CASE
		WHEN FAM.STATUS ILIKE 'ANAK' THEN 1
		ELSE 0
	END)
	AS JML_ANAK
FROM BIODATA BIO
JOIN EMPLOYEE EMP ON BIO.ID = EMP.BIODATA_ID
JOIN EMPLOYEE_POSITION EMPPOS ON EMP.ID = EMPPOS.EMPLOYEE_ID
JOIN POSITION POS ON EMPPOS.POSITION_ID = POS.ID
LEFT JOIN FAMILY FAM ON BIO.ID = FAM.BIODATA_ID
GROUP BY BIO.FIRST_NAME, BIO.LAST_NAME, POS.NAME, DOB;

--2 HITUNG BERAPA HARI CUTI YANG SUDAH DIAMBIL MASING-MASING KARYAWAN
--COALESCE : MENGUBAH [NULL] MENJADI NILAI LAIN
SELECT CONCAT(BIO.FIRST_NAME, ' ', BIO.LAST_NAME) AS FULLNAME,
	COALESCE(DATE_PART('DAY', SUM(AGE(LR.END_DATE, LR.START_DATE))),0) AS LAMA_CUTI
FROM BIODATA BIO
JOIN EMPLOYEE EMP ON BIO.ID = EMP.BIODATA_ID
LEFT JOIN LEAVE_REQUEST LR ON EMP.ID = LR.EMPLOYEE_ID
GROUP BY FIRST_NAME, LAST_NAME;

--3 TAMPILKAN FULLNAME DAN JABATAN 3 KARYAWAN PALING TUA
SELECT CONCAT(FIRST_NAME,' ',LAST_NAME) AS FULLNAME, 
	POS.NAME AS JABATAN,
	DATE_PART('YEAR',AGE(NOW(),TO_DATE(DOB,'YYYY-MM-DD'))) AS USIA
FROM BIODATA BIO
JOIN EMPLOYEE EMP ON BIO.ID = EMP.BIODATA_ID
JOIN EMPLOYEE_POSITION EMPPOS ON EMP.ID = EMPPOS.EMPLOYEE_ID
JOIN POSITION POS ON EMPPOS.POSITION_ID = POS.ID
LIMIT 3

--4 TAMPILKAN NAMA-NAMA PELAMAR YANG TIDAK DITERIMA KARYAWAN
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME)

FROM BIODATA
--5 HITUNG BERAPA RATA-RATA GAJI KARYAWAN DENGAN LEVEL STAFF
