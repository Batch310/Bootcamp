DROP TABLE IF EXISTS biodata;
CREATE TABLE biodata (
	id bigint,
	first_name varchar(20), 
	last_name varchar(30), 
	dob varchar(10), 
	pob varchar(50), 
	address varchar(255), 
	marital_status boolean
);

INSERT INTO biodata VALUES (1, 'Raya', 'Indriyani', '1991-01-01', 'Bali', 'Jl. Raya Baru, Bali', false);
INSERT INTO biodata VALUES (2, 'Rere', 'Wulandari', '1992-01-02', 'Bandung', 'Jl. Berkah Ramadhan, Bandung', false);
INSERT INTO biodata VALUES (3, 'Bunga', 'Maria', '1991-03-03', 'Jakarta', 'Jl. Mawar Semerbak, Bogor', true);
INSERT INTO biodata VALUES (4, 'Natasha', 'Wulan', '1990-04-10', 'Jakarta', 'Jl. Mawar Harum, Jakarta', false);
INSERT INTO biodata VALUES (5, 'Zahra', 'Aurelia Putri', '1991-03-03', 'Jakarta', 'Jl. Mawar Semerbak, Bogor', true);
INSERT INTO biodata VALUES (6, 'Katniss', 'Everdeen', '1989-01-12', 'Jakarta', 'Jl. Bunga Melati, Jakarta', true);

DROP TABLE IF EXISTS employee;
CREATE TABLE employee (
	id bigint,
	biodata_id bigint,
	nip varchar(5), 
	status varchar(10), 
	salary decimal(10, 0)
);

INSERT INTO employee VALUES (1, 1, 'NX001', 'Permanen', 12000000);
INSERT INTO employee VALUES (2, 2, 'NX002', 'Kontrak', 15000000);
INSERT INTO employee VALUES (3, 4, 'NX003', 'Permanen', 13500000);
INSERT INTO employee VALUES (4, 5, 'NX004', 'Permanen', 12000000);
INSERT INTO employee VALUES (5, 6, 'NX005', 'Permanen', 17000000);

DROP TABLE IF EXISTS contact_person;
CREATE TABLE contact_person (
	id bigint,
	biodata_id bigint,
	type varchar(5), 
	contact varchar(100)
);

INSERT INTO contact_person VALUES (1, 1, 'MAIL', 'raya.indriyani@gmail.com');
INSERT INTO contact_person VALUES (2, 1, 'PHONE', '085612345678');
INSERT INTO contact_person VALUES (3, 2, 'MAIL', 'rere.wulandari@gmail.com');
INSERT INTO contact_person VALUES (4, 2, 'PHONE', '081312345678');
INSERT INTO contact_person VALUES (5, 2, 'PHONE', '087812345678');
INSERT INTO contact_person VALUES (6, 3, 'MAIL', 'bunga.maria@gmail.com');
INSERT INTO contact_person VALUES (7, 4, 'MAIL', 'natasha.wulan@gmail.com');
INSERT INTO contact_person VALUES (8, 5, 'MAIL', 'zahra.putri@gmail.com');
INSERT INTO contact_person VALUES (9, 6, 'MAIL', 'katniss.everdeen@gmail.com');

DROP TABLE IF EXISTS leave;
CREATE TABLE leave (
	id bigint,
	type varchar(10), 
	name varchar(100)
);

INSERT INTO leave VALUES (1, 'Regular', 'Cuti Tahunan');
INSERT INTO leave VALUES (2, 'Khusus', 'Cuti Menikah');
INSERT INTO leave VALUES (3, 'Khusus', 'Cuti Haji & Umroh');
INSERT INTO leave VALUES (4, 'Khusus', 'Melahirkan');

DROP TABLE IF EXISTS employee_leave;
CREATE TABLE employee_leave (
  id integer,
  employee_id integer,
  period varchar(4),
  regular_quota integer
);

INSERT INTO employee_leave VALUES (1, 1, '2020', 16);
INSERT INTO employee_leave VALUES (2, 2, '2020', 12);
INSERT INTO employee_leave VALUES (3, 1, '2021', 16);
INSERT INTO employee_leave VALUES (4, 2, '2021', 12);
INSERT INTO employee_leave VALUES (5, 4, '2021', 12);
INSERT INTO employee_leave VALUES (6, 5, '2021', 12);
INSERT INTO employee_leave VALUES (7, 6, '2021', 12);

DROP TABLE IF EXISTS leave_request;
CREATE TABLE leave_request (
	id bigint,
	employee_id bigint,
	leave_id bigint,
	start_date date,
	end_date date,
	reason varchar(255)
);

INSERT INTO leave_request VALUES (1, 1, 1, '2020-10-10', '2020-10-12', 'Liburan');
INSERT INTO leave_request VALUES (2, 1, 1, '2020-11-12', '2020-11-15', 'Acara keluarga');
INSERT INTO leave_request VALUES (3, 2, 2, '2020-05-05', '2020-05-07', 'Menikah');
INSERT INTO leave_request VALUES (4, 2, 1, '2020-09-09', '2020-09-13', 'Touring');
INSERT INTO leave_request VALUES (5, 2, 1, '2020-12-24', '2020-12-25', 'Acara keluarga');

DROP TABLE IF EXISTS travel_type;
CREATE TABLE travel_type (
	id bigint,
	name varchar(50),
	travel_fee integer
);

INSERT INTO travel_type VALUES (1, 'In Indonesia', 200000);
INSERT INTO travel_type VALUES (2, 'Out Indonesia', 350000);

DROP TABLE IF EXISTS travel_request;
CREATE TABLE travel_request (
	id bigint,
	employee_id bigint,
	travel_type_id bigint,
	start_date date,
	end_date date
);

INSERT INTO travel_request VALUES (1, 1, 1, '2020-07-07', '2020-07-08');
INSERT INTO travel_request VALUES (2, 1, 1, '2020-08-07', '2020-08-08');
INSERT INTO travel_request VALUES (3, 2, 2, '2020-04-04', '2020-04-07');

DROP TABLE IF EXISTS travel_settlement;
CREATE TABLE travel_settlement (
	id bigint,
	travel_request_id bigint,
	item_name varchar(100),
	item_cost integer
);

INSERT INTO travel_settlement VALUES (1, 1, 'Tiket travel Do-Car berangkat', 165000);
INSERT INTO travel_settlement VALUES (2, 1, 'Hotel', 750000);
INSERT INTO travel_settlement VALUES (3, 1, 'Tiket travel Do-Car pulang', 165000);
INSERT INTO travel_settlement VALUES (4, 2, 'Tiket pesawat berangkat', 750000);
INSERT INTO travel_settlement VALUES (5, 2, 'Hotel', 650000);
INSERT INTO travel_settlement VALUES (6, 2, 'Tiket pesawat pulang', 1250000);
INSERT INTO travel_settlement VALUES (7, 3, 'Tiket pesawat berangkat', 4750000);
INSERT INTO travel_settlement VALUES (8, 3, 'Hotel', 6000000);
INSERT INTO travel_settlement VALUES (9, 2, 'Tiket pesawat pulang', 4250000);

DROP TABLE IF EXISTS position;
CREATE TABLE position (
	id bigint,
	name varchar(100)
);

INSERT INTO position VALUES (1, 'Direktur');
INSERT INTO position VALUES (2, 'General Manager');
INSERT INTO position VALUES (3, 'Manager');
INSERT INTO position VALUES (4, 'Staff');

DROP TABLE IF EXISTS employee_position;
CREATE TABLE employee_position (
	id bigint,
	employee_id bigint,
	position_id bigint
);

INSERT INTO employee_position VALUES (1, 5, 1);
INSERT INTO employee_position VALUES (2, 4, 2);
INSERT INTO employee_position VALUES (3, 3, 3);
INSERT INTO employee_position VALUES (4, 2, 4);
INSERT INTO employee_position VALUES (5, 1, 4);

DROP TABLE IF EXISTS department;
CREATE TABLE department (
	id bigint,
	name varchar(100)
);

INSERT INTO department VALUES (1, 'Recruitment');
INSERT INTO department VALUES (2, 'Sales');
INSERT INTO department VALUES (3, 'Human Resource');
INSERT INTO department VALUES (4, 'General Affair');

DROP TABLE IF EXISTS family;
CREATE TABLE family (
	id bigint, 
	biodata_id bigint, 
	name varchar(100), 
	status varchar(50)
);

INSERT INTO family VALUES (1, 3, 'Azka Fadlan Zikrullah', 'Suami');
INSERT INTO family VALUES (2, 3, 'Primrose Everdeen', 'Anak');
INSERT INTO family VALUES (3, 5, 'Jaka Samudera Buana', 'Suami');
INSERT INTO family VALUES (4, 5, 'Friska Davira', 'Anak');
INSERT INTO family VALUES (5, 5, 'Harum Indah Az Zahra', 'Anak');
INSERT INTO family VALUES (6, 6, 'Adya Pratama Yuda', 'Suami');

--------------------
-- CONCAT : MENGGABUNGKAN 2 ATAU LEBIH TEXT
select * from biodata

select
	first_name,
	last_name,
	concat(first_name,' ',last_name) as "full name 1",
	first_name || ' ' || last_name as "full name 2"
from biodata

-- Fungsi now() : menampilkan waktu/date sekarang

select now(); -- tipe datanya date

-- date_part() = buat ambil/extract bagian dari waktu

select date_part('year',now());
select date_part('month',now());
select date_part('hour',now());

select date_part('year', '02/02/2023'); -- error,karena 02/02/2023 bukan date

--to_date() = buat convert string ke date

select '02/01/2023';
select to_date('02/01/2023','DD/MM/YYYY');
select date_part('year',to_date('02/02/2023','DD/MM/YYYY'));

select
	DOB,
	to_date(dob,'YYYY-MM-DD'),
	date_part('year',to_date(DOB,'YYYY-MM-DD'))
	
from biodata

-- Age() : menghitung selisih dari 2 date
select now ();
select to_date('15/04/2000','DD/MM/YYYY');
select age(now(),to_date('15/04/2000','DD/MM/YYYY')),
select date_part('year', age(now(),to_date('15/04/2000','DD/MM/YYYY')))

select
	DOB,
	to_date(DOB,'YYYY-MM-DD'),
	age(now(),to_date(DOB,'YYYY-MM-DD')),
	date_part('year',age(now(),to_date(DOB,'YYYY-MM-DD'))) as umur
from biodata

--case when end -> kondisi percabangan di sql
select 
	-- kolom1
	pob,
	-- kolom2
	case
		when POB ilike 'BaLi' then 'Bali Omah'
		when POB = 'Bandung'then 'Bandung Dingin'
		else 'Kota Hilang'
	end

from biodata;

-- Latihan 1
--1 tampilkan fullname,jabata,usia & jumlah anak dari masing2 karyawan
select * from biodata;
select
	b.first_name || ' ' || b.last_name as fullname,
	p.name as jabatan,
	date_part('year',age(now(),to_date(DOB,'YYYY-MM-DD'))) as usia,
	sum(case
	   	when f.status ilike 'anak' then 1
		else 0
		end) as "JUMLAH ANAK"

from biodata b
join employee e
	on b.id = e.biodata_id
join employee_position ep 
	on e.id = ep.employee_id 
join position p
	on p.id = ep.position_id
left join family f
	on b.id = f.biodata_id
group by fullname, jabatan, usia;

--2 hitung berapa hari cuti yang sudah di ambil masing2 karyawan
-- coalesce => mengubah yang null menjadi yang lain
--biodata, employee, leave_request
select 
	first_name || ' ' || last_name as nama_karyawan,
	sum(age(lr.end_date,lr.start_date)) as jumlah_cuti,
	coalesce(date_part('day',sum(age(lr.end_date,lr.start_date))),0) as jumlah_cuti2
from biodata b
join employee e
	on b.id = e.biodata_id
left join leave_request lr
	on lr.employee_id = e.id
group by nama_karyawan;

--3 tampilkan fullname dan jabatan 3 karyawan paling tua
select
	b.first_name || ' ' || b.last_name as fullname,
	p.name as jabatan,
	age(now(),to_date(DOB,'YYYY-MM-DD')) as umur
from biodata b
join employee e
	on b.id = e.biodata_id 
join employee_position ep
	on e.id = ep.employee_id
join position p
	on p.id = ep.position_id 
order by umur desc
limit 3;

--4 tampilkan nama nama pelamar yang tidak diterima karyawan

select 
	first_name || ' ' || last_name as fullname,
	status
from biodata b
left join employee e
	on b.id = e.biodata_id
--5 hitung berapa rata-rata gaji karyawan dengan level staff
select 
	-- round untuk membulatkan
	round(avg(salary)) as Rata_rata
from biodata b
join employee e
	on b.id = e.biodata_id
join employee_position ep
	on b.id = ep.employee_id
join position p
	on p.id = ep.position_id
where name ilike 'Staff'
-----------------------------------------
--1. Tampilkan status karyawan dan jumlah karyawan untuk setiap statusnya
select 
	e.status,
	count(status) as jumlah 
from biodata b
left join employee e
	on b.id = e.biodata_id
group by status
--2. tampilkan data biodata yang bukan merupakan karyawan
select 
	b.first_name || ' ' || b.last_name as fullname,
	status
from biodata b
left join employee e
	on b.id = e.biodata_id
where e.status is null
--3. tampilkan fullname, status pernikahan (sudah menikah/ belum menikah) dan nama anak
-- dari data biodata yang sudah punya anak
select 
	b.first_name || ' ' || b.last_name as fullname,
	case 
		when f.status ilike 'Anak' then 'Sudah Menikah' 
		when f.status ilike 'Suami' then 'Sudah Menikah' 
		else 'Belum Menikah'
	end as Status,
	f.name
from biodata b
left join family f
	on b.id = f.biodata_id
group by fullname,Status,Name
--4. Tampilkan nama lengkap karyawan beserta departmennya


--5. Tampilkan tahun lahir & jumlah karyawan yang mempunyai tahun lahir yang sama
select
	b.first_name || ' ' || b.last_name as fullname,
	date_part('year',to_date(DOB,'YYYY-MM-DD')) as tahunlahir
from biodata b
group by fullname, tahunlahir
order by tahunlahir desc

--6. Tampilkan data biodata & jabatan dari karyawan
select 
	b.*,
	b.first_name || ' ' || b.last_name as fullname,
	p.name as Jabatan
from biodata b
join employee e
	on b.id = e.biodata_id
join employee_position ep
	on e.id = ep.employee_id
join position p
	on p.id = ep.position_id

--7. tampilkan data biodata yang alamat & tempat lahirnya bukan jakarta
select 
	b.*,
	b.pob
from biodata b
where b.pob not ilike 'jAkarta%' and b.address not ilike '%jaKarta'

--8. tampilkan fullname, jabatan dan usia dari karyawn
select 
	b.first_name || ' ' || b.last_name as fullname,
	p.name as jabatan,
	date_part('year',age(now(),to_date(DOB,'YYYY-MM-DD'))) as usia
from biodata b
join employee e
	on b.id = e.biodata_id
join employee_position ep
	on e.id = ep.employee_id 
join position p
	on p.id = ep.position_id

--9. tampilkan nama karyawan yang cutinya paling lama

select
	b.first_name || ' ' || b.last_name as fullname,
	sum(age(lr.end_date,lr.start_date)) as lama_cuti
from biodata b
join employee e
	on b.id = e.biodata_id
join leave_request lr
	on e.id = lr.employee_id
group by fullname

select max(t.lama_cuti)from(select
	b.first_name || ' ' || b.last_name as fullname,
	sum(age(lr.end_date,lr.start_date)) as lama_cuti
from biodata b
join employee e
	on b.id = e.biodata_id
join leave_request lr
	on e.id = lr.employee_id
group by fullname)t

SELECT *
FROM
	(SELECT B.FIRST_NAME || ' ' || B.LAST_NAME AS FULLNAME,
			SUM(AGE(LR.END_DATE,

								LR.START_DATE)) AS LAMA_CUTI
		FROM BIODATA B
		JOIN EMPLOYEE E ON B.ID = E.BIODATA_ID
		JOIN LEAVE_REQUEST LR ON E.ID = LR.EMPLOYEE_ID
		GROUP BY FULLNAME)t
WHERE T.LAMA_CUTI =
(SELECT MAX(T.lama_CUTI)
FROM
	(SELECT B.FIRST_NAME || ' ' || B.LAST_NAME AS FULLNAME,
			SUM(AGE(LR.END_DATE,

								LR.START_DATE)) AS LAMA_CUTI
		FROM BIODATA B
		JOIN EMPLOYEE E ON B.ID = E.BIODATA_ID
		JOIN LEAVE_REQUEST LR ON E.ID = LR.EMPLOYEE_ID
		GROUP BY FULLNAME)T)
		
--10. tampilkan nama karyawan, jenis perjalanan dinas, tanggal perjalanan dinas 
--dan total pengeluarannya selama perjalnan dinas tersebut
SELECT B.FIRST_NAME || ' ' || B.LAST_NAME AS FULLNAME,
	TT.NAME AS JENIS_PERJALANAN,
	TR.START_DATE || 'S/D' || TR.END_DATE AS TANGGAL_PERJALANAN,
	SUM(TS.ITEM_COST) + TT.TRAVEL_FEE AS TOTAL_PENGELUARAN
FROM BIODATA B
JOIN EMPLOYEE E ON B.ID = E.BIODATA_ID
JOIN TRAVEL_REQUEST TR ON E.ID = TR.EMPLOYEE_ID
JOIN TRAVEL_SETTLEMENT TS ON TR.ID = TS.TRAVEL_REQUEST_ID
JOIN TRAVEL_TYPE TT ON TR.TRAVEL_TYPE_ID = TT.ID
GROUP BY FULLNAME,
	JENIS_PERJALANAN,
	TRAVEL_FEE,
	TANGGAL_PERJALANAN

-- Casting/convert tipe data yang ditampilkan/diolah
select '100' as data;
select '100'::int as data;
select 100::text as data;